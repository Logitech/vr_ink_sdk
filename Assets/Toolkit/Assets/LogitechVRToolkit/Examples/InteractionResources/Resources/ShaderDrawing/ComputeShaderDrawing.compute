// Each #kernel tells which function to compile; you can have many kernels.
#pragma kernel CSMain
#pragma kernel SaveFrame
#pragma kernel WriteFrame
#pragma kernel EraseAll

// Variables.
RWTexture2D<float4> Result;
float Range;

float2 TextureDimension;

float4 penColor;
int arrayLength;
float4 penPosition[100];
float hardness;
float brushSize;
float previousBrushSize;
bool isErasing;

RWTexture2DArray<float4> UndoTexture;
float4 previousPenPosition;

Texture2D<float4> UndoTextures[100];

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for(int i = 0; i < arrayLength; i++)
    {
        float newBrushSize = lerp(previousBrushSize, brushSize, (float) i / arrayLength);
        float distanceFromInk = distance(penPosition[i], id.xy);
        float brushDrawing = step(distanceFromInk, newBrushSize);

        // Color from the stylus that is going to be blended.
        float4 sourceColor = penColor;
        // Destination color, basically the canvas.
        float4 destinationColor = Result[id.xy];
        // Final color.
        float4 outColor = penColor;

        // Alpha blending as per https://en.wikipedia.org/wiki/Alpha_compositing#Composing_alpha_blending_with_gamma_correction.
        outColor.a = sourceColor.a + destinationColor.a * (1 - sourceColor.a);
        outColor.rgb = sourceColor.rgb + destinationColor.rgb * (1 - sourceColor.a);

        // Do not blend if drawing is on the same color.
        float allowBlending = step(0.01, distance(destinationColor, sourceColor));
        outColor = allowBlending * outColor + step(allowBlending, 0) * penColor;

        if (allowBlending == 0)
        {
            outColor = penColor;
        }

        if (brushDrawing == 1)
        {
            Result[id.xy] = outColor;
        }
    }
}

int currentDepth;
[numthreads(32, 32, 1)]
void SaveFrame (uint3 id : SV_DispatchThreadID)
{
   UndoTexture[uint3(id.x, id.y, currentDepth)] = Result[id.xy];
}

[numthreads(32, 32, 1)]
void WriteFrame (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] =  UndoTexture[uint3(id.x, id.y, currentDepth)];
}

[numthreads(32, 32, 1)]
void EraseAll (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(0, 0, 0, 0);
}

